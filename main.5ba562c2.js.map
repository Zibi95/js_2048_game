{"version":3,"sources":["scripts/helpers.js","scripts/domFunctions.js","scripts/moveFunctions.js","scripts/main.js"],"names":["getRandomIndex","gridSize","Math","floor","random","getSelectedAxis","array","y","reduce","acc","curr","i","length","push","getColumns","cells","getRows","getTotalPoints","textContent","isCellsEqual","currentCells","newCells","some","cell","isEqualNode","flat","hasEmptyCell","isMergePossible","rowsAndColumns","subArr","isGameOver","isWin","GRID_SIZE","removeModifierClass","domNode","classModifier","classList","item","remove","fillCell","value","add","clearCells","forEach","createEmptyCell","document","createElement","addRandomCell","randomCell","rows","children","handleButtonChange","targetedButton","newButtonLabel","toLowerCase","updateBoard","row","innerHTML","append","mergeCells","cellsArray","mergedCells","currCell","nextCell","getNewCells","cellsGroup","reversed","map","group","cleanedCellsGroup","filter","mergedCellsGroup","emptyCellsGroup","Array","from","concat","slideCellsHorizontal","newRowCells","slideCellsVertical","newColumnCells","newColumnCellsToRow","moveUp","moveDown","moveLeft","moveRight","getElementsByClassName","button","querySelector","message","querySelectorAll","score","isPlaying","resetTheGame","removeEventListener","addEventListener","startTheGame","e","key"],"mappings":"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","file":"main.5ba562c2.js","sourceRoot":"..\\src","sourcesContent":["export const getRandomIndex = (gridSize) =>\n  Math.floor(Math.random() * gridSize);\n\nexport const getSelectedAxis = (array, y) =>\n  array.reduce(\n    (acc, curr, i) => {\n      acc[Math.floor(y ? i % acc.length : i / acc.length)].push(curr);\n\n      return acc;\n    },\n    [[], [], [], []]\n  );\n\nexport const getColumns = (cells) => {\n  return getSelectedAxis([...cells], true);\n};\n\nexport const getRows = (cells) => {\n  return getSelectedAxis([...cells]);\n};\n\nexport const getTotalPoints = (cells) =>\n  [...cells].reduce(\n    (acc, curr) => (+curr.textContent > 2 ? acc + +curr.textContent : acc + 0),\n    0\n  );\n\nexport const isCellsEqual = (currentCells, newCells) =>\n  [...currentCells].some((cell, i) => !cell.isEqualNode(newCells.flat()[i]));\n\nexport const hasEmptyCell = (cells) =>\n  [...cells].some((cell) => cell.textContent === \"\");\n\nconst isMergePossible = (cells) => {\n  const rowsAndColumns = [...getRows(cells), ...getColumns(cells)];\n\n  for (const subArr of rowsAndColumns) {\n    for (let i = 0; i < subArr.length; i++) {\n      if (subArr[i].isEqualNode(subArr[i + 1])) {\n        return true;\n      }\n    }\n  }\n};\n\nexport const isGameOver = (cells) => {\n  if (!hasEmptyCell(cells)) {\n    return !isMergePossible(cells);\n  }\n\n  return false;\n};\n\nexport const isWin = (cells) =>\n  [...cells].some((cell) => +cell.textContent === 2048);\n","import { getRandomIndex } from './helpers';\r\nimport { rows, cells } from './main';\r\n\r\nexport const GRID_SIZE = 4;\r\n\r\nconst removeModifierClass = (domNode) => {\r\n  const classModifier = domNode.classList.item(1);\r\n\r\n  if (classModifier) {\r\n    domNode.classList.remove(classModifier);\r\n  }\r\n};\r\n\r\nexport const fillCell = (cell, value) => {\r\n  removeModifierClass(cell);\r\n\r\n  cell.textContent = value;\r\n  cell.classList.add(`field-cell--${value}`);\r\n};\r\n\r\nexport const clearCells = () => {\r\n  [...cells].forEach((cell) => {\r\n    cell.textContent = null;\r\n    removeModifierClass(cell);\r\n  });\r\n};\r\n\r\nexport const createEmptyCell = () => {\r\n  const cell = document.createElement('td');\r\n\r\n  cell.classList.add('field-cell');\r\n\r\n  return cell;\r\n};\r\n\r\nexport const addRandomCell = () => {\r\n  const randomCell\r\n    = rows[getRandomIndex(GRID_SIZE)].children[getRandomIndex(GRID_SIZE)];\r\n  const value = Math.random() < 0.1 ? 4 : 2;\r\n\r\n  if (randomCell.textContent) {\r\n    addRandomCell();\r\n  } else {\r\n    fillCell(randomCell, value);\r\n  }\r\n};\r\n\r\nexport const handleButtonChange = (targetedButton, newButtonLabel) => {\r\n  removeModifierClass(targetedButton);\r\n\r\n  targetedButton.classList.add(newButtonLabel.toLowerCase());\r\n  targetedButton.textContent = newButtonLabel;\r\n};\r\n\r\nexport const updateBoard = (newCells) => {\r\n  [...rows].forEach((row, i) => {\r\n    row.innerHTML = '';\r\n    row.append(...newCells[i]);\r\n  });\r\n\r\n  addRandomCell();\r\n};\r\n","import {\r\n  getSelectedAxis,\r\n  isCellsEqual,\r\n  getColumns,\r\n  getRows,\r\n} from './helpers';\r\nimport {\r\n  createEmptyCell,\r\n  fillCell,\r\n  updateBoard,\r\n  GRID_SIZE,\r\n} from './domFunctions';\r\nimport { cells } from './main';\r\n\r\nconst mergeCells = (cellsArray) => {\r\n  const mergedCells = [];\r\n\r\n  for (let i = 0; i < cellsArray.length;) {\r\n    const currCell = cellsArray[i];\r\n    const nextCell = cellsArray[i + 1];\r\n\r\n    if (nextCell && currCell.isEqualNode(nextCell)) {\r\n      fillCell(currCell, +currCell.textContent * 2);\r\n      i++;\r\n    }\r\n    i++;\r\n\r\n    mergedCells.push(currCell);\r\n  }\r\n\r\n  return mergedCells;\r\n};\r\n\r\nconst getNewCells = (cellsGroup, reversed) =>\r\n  cellsGroup.map((group) => {\r\n    const cleanedCellsGroup = group.filter((cell) => cell.textContent && cell);\r\n    const mergedCellsGroup = mergeCells(cleanedCellsGroup);\r\n\r\n    const emptyCellsGroup = Array.from(\r\n      { length: GRID_SIZE - mergedCellsGroup.length },\r\n      () => createEmptyCell()\r\n    );\r\n\r\n    if (reversed) {\r\n      return emptyCellsGroup.concat(mergedCellsGroup);\r\n    }\r\n\r\n    return mergedCellsGroup.concat(emptyCellsGroup);\r\n  });\r\n\r\nconst slideCellsHorizontal = (cellsGroup, reversed) => {\r\n  const newRowCells = getNewCells(cellsGroup, reversed);\r\n\r\n  if (isCellsEqual(cells, newRowCells)) {\r\n    updateBoard(newRowCells);\r\n  }\r\n};\r\n\r\nconst slideCellsVertical = (cellsGroup, reversed) => {\r\n  const newColumnCells = getNewCells(cellsGroup, reversed);\r\n  const newColumnCellsToRow = getSelectedAxis(newColumnCells.flat(), true);\r\n\r\n  if (isCellsEqual(cells, newColumnCellsToRow)) {\r\n    updateBoard(newColumnCellsToRow);\r\n  }\r\n};\r\n\r\nexport const moveUp = () => {\r\n  slideCellsVertical(getColumns(cells));\r\n};\r\n\r\nexport const moveDown = () => {\r\n  slideCellsVertical(getColumns(cells), true);\r\n};\r\n\r\nexport const moveLeft = () => {\r\n  slideCellsHorizontal(getRows(cells));\r\n};\r\n\r\nexport const moveRight = () => {\r\n  slideCellsHorizontal(getRows(cells), true);\r\n};\r\n","\r\nimport { addRandomCell, clearCells, handleButtonChange } from './domFunctions';\r\nimport { getTotalPoints, isGameOver, isWin } from './helpers';\r\nimport { moveUp, moveDown, moveLeft, moveRight } from './moveFunctions';\r\n\r\nexport const rows = document.getElementsByClassName('field-row');\r\nexport const cells = document.getElementsByClassName('field-cell');\r\n\r\nconst button = document.querySelector('.button');\r\nconst message = document.querySelectorAll('.message');\r\nconst score = document.querySelector('.game-score');\r\n\r\nlet isPlaying = false;\r\n\r\nconst resetTheGame = () => {\r\n  button.removeEventListener('click', resetTheGame);\r\n\r\n  clearCells();\r\n  score.textContent = 0;\r\n  handleButtonChange(button, 'Start');\r\n  message[0].classList.add('hidden');\r\n  message[1].classList.add('hidden');\r\n  message[2].classList.remove('hidden');\r\n  button.addEventListener('click', startTheGame);\r\n\r\n  isPlaying = false;\r\n};\r\n\r\nconst startTheGame = () => {\r\n  button.removeEventListener('click', startTheGame);\r\n\r\n  addRandomCell();\r\n  handleButtonChange(button, 'Restart');\r\n  button.addEventListener('click', resetTheGame);\r\n  message[2].classList.add('hidden');\r\n\r\n  isPlaying = true;\r\n};\r\n\r\nbutton.addEventListener('click', startTheGame);\r\n\r\ndocument.addEventListener('keydown', (e) => {\r\n  if (!isPlaying) {\r\n    return;\r\n  }\r\n\r\n  if (isGameOver(cells)) {\r\n    message[0].classList.remove('hidden');\r\n    isPlaying = false;\r\n\r\n    return;\r\n  }\r\n\r\n  switch (e.key) {\r\n    case 'ArrowUp':\r\n      moveUp();\r\n      break;\r\n    case 'ArrowDown':\r\n      moveDown();\r\n      break;\r\n    case 'ArrowLeft':\r\n      moveLeft();\r\n      break;\r\n    case 'ArrowRight':\r\n      moveRight();\r\n      break;\r\n    default:\r\n      break;\r\n  }\r\n\r\n  score.textContent = getTotalPoints(cells);\r\n\r\n  if (isWin(cells)) {\r\n    message[1].classList.remove('hidden');\r\n    isPlaying = false;\r\n  }\r\n});\r\n"]}